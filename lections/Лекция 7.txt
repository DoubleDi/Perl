Базы данных
Реляционные базы
все хранится в табличках

Немного SQL
SELECT id, name FROM student
SELECT * FROM student #* - все
SELECT * FROM grades WHERE points > 0
LIKE '%В%'
AND OR и прочее
SELECT * FROM teachers LIKE '%В%' AND floor > 20
SELECT * FROM homework JOIN  grade ON homework.id = grade.homework.id
LEFT JOIN / RIGHT JOIN (Если есть самое левое поле то выводи)
ORDER BY first_name # DESC (обратный порядок)
Можно много раз пиcать JOIN
DELETE UPDATE INSERT

DBI - модуль
DBI->connect(куда, юзер, парольб доп параметры) возвращает database handler
->do() # sql запрос
->quote() # экранирует все проблемы - не очень
круче == ->prepare() ->execute()
в prepare() ? заменяются на параметры из execute()
->fetchrow_(название)() - возвращает все данные из execute() по одной строчке за раз
круче == ->fetchall_(название)() - позвращает все данные
(название) - снаружи
параметр - внутри
можно пихать колонки, чтобы возвращать только некоторые
можно массив массивов
или массив хэшей
fetchall_hashref('id') - ключ по айди - впринципе ключ по параметру
можно по нескольким данным - т е вложенные данные

selectrow_(название)()

#самый частый
selectall_(название)(запрос с вопросиками,по какому ключу собирать хэш, аттрибуты Slice => {} [], что вместо вопросиков);

Ошибки
->connect(..., { RaiseError => 1 });
->err
->errstr

Транзакции - группа запросов (гарантируется атомарность)
->connect(...,{ AutoCommit => 1});
->begin_work #начать
->rollback #отменить
->commit #применить

->last_insert_id #возвращает id последнего добавленного

DBIx::Class
абстракция над базой, где можно быстро и просто работать, но сначало ему надо обьяснить как работать с базой

resultset - обьект который готов к запросу #вместо SELECT
есть куча запросов
возвращает result или resultset
result->(поле)  #обьект
->search #вместо WHERE и т д
->search можно писать вложенный
первый параметр == операция
второй параметр у search == WHERE
если ключи совпадают {} == [{},{}]
->find - найти одну строчку данных а не массив
->find == ->search()->single();
->find({'id' => 123123}) == ->find(123123);

если передать не данные а ссылку на данные то он исполнит sql запрос
-or => [] 
-and => []

->search({},{'me.name'}) #me == self, me.name - поле name
prefetch == selest related

Local::Schema::ResultSet::User;
можно доопределять методы в search у resultset!!!
Local::Schema::Result::User;
можно доопределять методы у result!!!
их можно даже в файликах добвалять со специальным названием

new_result->новый пользователь

many_to_many -автоматическая генерация связей manytomany

->storage->debug(1) # все sql выплевывает в stdout
->storage->dbh() # возвращает dbh

генерация схемы (автоматом)
Schema::Loader
или метод dbicdump
круче ручками
оптимально - 1 раз автоматом, а потом руками все редактировать

SQL::Translator
чтобы вообще не работать с sql
$schema->deploy();
cхема копируется не через sql а через схему dbi

описываем схему и говорим load_namespaces

Домашка:
1) качаем sql
по нему формируем схему
2) и делаем 3 метода заданных и 2 своих
схема
	
